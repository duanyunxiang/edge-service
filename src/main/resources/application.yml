logging:
  group:
    # 定义日志组
    circuitbreaker: io.github.resilience4j,org.springframework.cloud.circuitbreaker
  level:
    # 为组指定统一的日志级别
    circuitbreaker: info
  pattern:
    # 在日志级别旁边，包含应用名、跟踪ID和跨度ID
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  # 认证配置
  security:
    oauth2:
      client:
        registration:
          # registrationId客户端注册名称，接收授权码url地址格式：/login/oauth2/code/{registrationId}
          keycloak:
            client-id: edge-service
            # 客户端与keycloak认证的共享secret
            client-secret: polar-keycloak-secret
            # 客户端希望访问的scope列表
            scope: openid,roles
        provider:
          # 关联前面定义的registrationId=keycloak
          keycloak:
            # keycloak对外提供指定realm=PolarBookshop功能的端点
            issuer-uri: http://localhost:8080/realms/PolarBookshop
  # redis配置
  redis:
    connect-timeout: 2s
    host: localhost
    port: 6379
    # 收到响应时间限制
    timeout: 1s
  session:
    timeout: 10m
    redis:
      # 命名空间，作为key前缀
      namespace: polar:edge
  config:
    import: ""
  cloud:
    config:
      # 禁用spring cloud client客户端
      enabled: false
      uri: http://localhost:8888
      request-connect-timeout: 5000
      request-read-timeout: 5000
      fail-fast: false
      retry:
        max-attempts: 3
        initial-interval: 1000
        max-interval: 2000
        multiplier: 1.1
    # 网关配置
    gateway:
      # 配置Netty HTTP客户端属性
      httpclient:
        connect-timeout: 2000
        response-timeout: 3s
        pool:
          # 连接池类型
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      # 路由定义列表
      routes:
        - id: spa-route
          uri: ${SPA_URL:http://localhost:9004}
          predicates:
            # 匹配根端点和SPA静态资源
            - Path=/,/*.css,/*.js,/favicon.ico
          # 路由id
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
            # 断言形式为路径匹配
            - Path=/books/**
          filters:
            # 过滤器名称
            - name: CircuitBreaker
              args:
                # 断路器名称
                name: catalogCircuitBreaker
                # 断路器打开时，要转发的地址
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                # 这次没有配置回退uri
                name: orderCircuitBreaker
      # 默认过滤器列表
      default-filters:
          # 保存会话数据
        - SaveSession
          # 启用访问令牌传播
        - TokenRelay
          # 重试过滤器，Gateway应用顺序=4
        - name: Retry
          args:
            # 重试次数
            retries: 2
            methods: GET
            # 仅遇到5xx错误时重试
            series: SERVER_ERROR
            # 仅当抛出指定异常时重试；下游服务未运行时抛出的是ConnectException，不会触发重试
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            # 重试延迟策略
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              baseOnPreviousValue: false
          # 请求限流器（令牌桶算法），Gateway应用顺序=1，若redis不可用，该限流器会被spring cloud gateway暂时禁用
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              # 令牌补充率：10个/s
              replenishRate: 10
              # 桶容量
              burstCapacity: 20
              # 每次请求消耗令牌数
              requestedTokens: 1

management:
  endpoints:
    web:
      exposure:
        # 通过http暴露/actuator/health端点
        include: health, prometheus
  endpoint:
    health:
      # 始终展示应用详情和组件详情
      show-details: always
      show-components: always
      probes:
        # 启用对健康探针的支持
        enabled: true
      group:
        readiness:
          # 就绪探针会组合考虑redis的可用性
          include: readinessState,redis
  metrics:
    tags:
      # 添加带有应用名称的Micrometer通用标签，这会将一个Prometheus标记应用到所有度量中
      application: ${spring.application.name}

server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

resilience4j:
  # 断路器配置，Gateway应用顺序=3
  circuitbreaker:
    configs:
      # 适用于所有断路器的默认配置
      default:
        # 窗口size
        sliding-window-size: 20
        # 窗口中失败率高于50%时，断路器断开
        failure-rate-threshold: 50
        # 断路器=半开状态时，允许请求次数
        permitted-number-of-calls-in-half-open-state: 5
        # 从打开到半开的等待时间
        wait-duration-in-open-state: 15s
  # 限时器配置，Gateway应用顺序=2
  timelimiter:
    configs:
      default:
        # 超时时间，优先级高于为Netty HTTP客户端定义的响应超时时间
        timeout-duration: 3s
